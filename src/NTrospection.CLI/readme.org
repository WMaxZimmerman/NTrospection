* Steps to build and publish to [[www.nuget.org][NuGet]]
- Build Project
  dotnet build
  - Run Tests ::
    #+begin_src sh
    dotnet test
    #+end_src
    
  - Increment Version
    This is a manual process of updating [[file:NTrospection.CLI.csproj][csproj]]
    - Automation
      IDK a dotnet way for this so... Bash?
- Pack NuGet ::
  #+begin_src sh
  dotnet nuget pack 
  #+end_src
  
- publish NuGet ::
  #+begin_src python
   dotnet nuget push {PathToNupkg} -k {ApiKey} -s https://api.nuget.org/v3/index.json
  #+end_src
 
  - PathToNupkg: bin/Debug/NTrospection.CLI.{version}.nupkg
  - version: the version number defined in [[file:NTrospection.CLI.csproj][csproj]]
  - ApiKey: Get from [[www.nuget.org][NuGet]]


#+TITLE:NTrospection.CLI
This library is designed to make the process of creating and managing Console Applications as easy as possible. 
NTrospection.CLI will handle processing all command line arguments, wiring up and execution of methods, and user 
documentation. If you are tired of having to manage every possible command line argument on how to map those to methods, 
then this is a library you should absolutely starting using.

To start using NTrospection.CLI there are two routes (three if you include pulling down this source code) that you can 
take.

* How To Use It
To setup NTrospection.CLI manually you will need to first install [[https://www.nuget.org/packages/NTrospection.CLI][this nuget package]]. Now that we have the nuget package 
ready we will want to update 'Program.cs' file. Inside of the 'Main' method of the 'Program.cs' you will want to add 
this line:

#+NAME: Process Args
#+BEGIN_SRC csharp
#r "nuget:NTrospection.CLI,2.0.0"

using NTrospection.CLI.Core;
using NTrospection.CLI.Attributes;

namespace YourApplication.Console
{
    public class Program
    {
        public void Main(string[] args)
	{
	    new Processor().ProcessArguments(args);
	}
    }
}
#+END_SRC

This will send all of your command line arguments to NTrospection.CLI to be validated and processed. Once we have that 
done we have finished all of the boiler plate for NTrospection.CLI. Now we can move on to writing the code for your 
application.

* Controllers
A controller in NTrospection.CLI is simply a class that is able to be accessed from the command line. To create a 
controller you just need to add the attribute =CliController= to a public class. This will let NTrospection.CLI 
know that it is a controller. When creating the attribute it is good to note that it has the following two parameters.

- Name ::
  The name of the controller and the command line argument to be entered to access the controller.
- Description ::
  A description of the functionality provided by the controller. This can be output via the help function in a terminal.

* Commands
A command is a method that can be accessed by NTrospection.CLI. Similar to controllers this must be a public method and 
will need to have the attribute =CliCommand=. This attribute also has two parameters just like its controller 
counterpart.
- Name ::
  The name of command and the command line argument to be entered to access the command.
- Description ::
  A description of the functionality of the method. This can be output via the help function in a terminal.
- NOTE ::
  If you have async processes in your method you should use a Wait/Result if you need the application to wait before 
  returning.

* Parameters
To wire in your parameters you have to do... nothing. Yes, nothing. No more if/select statements to decide a code path. 
Simiply put the parameters in the method like normal and let NTrospection.CLI handle the rest. NTrospection.CLI will use 
the variable name that you set in your code as the input for the terminal as well as provide you type safety during 
execution. NTrospection.CLI is smart enough to know what types your parameters are and will output all possible 
documentation when prompted via the help function. This includes the name of the parameter, its type, if it is optional 
or required (based on if it has a default value), and even its possible options if it is an enum. That is a lot of work 
and ridiculous wiring that you no longer have to do! And, you can even add more details to the parameters, if you want.

To add more details to your parameters you can use the =CliParameter= attribute. This attribute allows you to specify an 
alias and description for a parameter. Currently the alias is required to be passed to the constructor and the 
description is optional. If specified the description will be output when the help command is used. You are also able to 
change the =paramDetail= config value to =detailed=. If you do, you will also be able to see what value was assigned as 
a default for optional parameters.

One special case is when you have a boolean argument. You are now able to use just the argument without specifying a 
value. If you do this the value will be set as true.

* Usage
Once you have setup the boiler plate and have at least one controller and method (Done for you if you used the template) 
you can build your executable and navigate to it in a terminal and start to run your application. To execute your code 
you will use the pattern:

#+NAME: Example-Call
#+BEGIN_SRC sh
  <yourprogam> <controller> <command> --<parameter> <value>
#+END_SRC

Notice the =--= infront of the =<parameter>=. This is the format that lets NTrospection.CLI know when a paramter starts 
and will add the following arguments to it as values. It is good to know that if you have a List/Array/IEnumerable as 
your type that it will pass in all values until the next parameter. If the parameter is not a IEnumerable than it will 
only get the first value assigned and the others will be ignored.

* Error Handling
You might be thinking, "That all sounds great, but what if it recieves bad input?" NTrospection.CLI is setup to handle 
invalid input gracefully.  It will validate all of the inputs before even attempting to execute your code, and if any of 
the inputs violate type or arguments it will notify the user and stop any further execution before reaching your code. 
NTrospection.CLI will also gracefully handle errors that might happen in your code (Not that that would happen because 
your code is flawless). If an error occurs in your code it will output the error message and the stack trace to the 
terminal.

* Application Loop
You can also enable the application loop for you project. To do so you will need to add the =applicationLoopEnabled= key 
to your appsettings section of your config with a value of =true=. After you have done this your application is setup to 
use the Application Loop. "But, what is the Application Loop?", you ask. The Application Loop is where you execute 
your application with no parameters. This puts you into a loop that keeps you in the context of your application until 
you pass it the exit string (=exit= by default). This will allow you to not have to continue executing new instances of 
your application, and will allow you to leave off the application part of calls.  This is mostly useful when you will be 
performing several different command for your application.

* Configuration
If you don't like the defaults that I setup you can change the =helpString= and the =argumentPrefix= or any other value
in the =App.config= file. To do this simply add these lines to the =appsettings= section of the your config.

#+NAME: Example Config
#+BEGIN_SRC xml
  <add key="helpString" value="?" />
  <add key="argumentPrefix" value="--" />
  <add key="paramDetail" value="simple" />
  <add key="applicationLoopEnabled" value="true" />
  <add key="inputIndicator" value=">" />
  <add key="exitString" value="exit" />
#+END_SRC

If you don't have an =appsettings= section of your =App.config= you can simply add one and then add the lines there. You 
should keep in mind that if you change these values then some of this documentation may no longer apply as it assumes 
you are using the defaults.

* Hello World

Program.cs:  

#+NAME: Complete-Hello-World-Examples
#+BEGIN_SRC csharp :results value verbatim :exports both
#r "nuget:NTrospection.CLI,2.0.0"

using System;
using NTrospection.CLI.Core;
using NTrospection.CLI.Attributes;

public static class Program
{
  public static void Main(string[] args)
  {
     new Processor().ProcessArguments(args);
  }
}
  
[CliController("example", "a container for example commands")]
public static class ExampleController
{
  [CliCommand("hello", "says 'Hello' to the given name")]
  public static void HelloWorld(string name)
  {
    System.Console.WriteLine("Hello, " + name);
  }

  [CliCommand("goodbye", "says 'Good-bye' to the given name")]
  public static void GoodbyeWorld(string name = "World")
  {
    System.Console.WriteLine("Good-bye, " + name);
  }
}

Console.WriteLine("==== Command Execution ====");
var inputArgs = new string[]{"example", "hello", "--name", "World"};
Program.Main(inputArgs);
Console.WriteLine("==== Command Execution ====");

Console.WriteLine();

Console.WriteLine("==== Command Help ====");
inputArgs = new string[]{"example", "hello", "--name", "World", "?"};
Program.Main(inputArgs);
Console.WriteLine("==== Command Help ====");

Console.WriteLine();

Console.WriteLine("==== Controller Help ====");
inputArgs = new string[]{"example", "?"};
Program.Main(inputArgs);
Console.WriteLine("==== Controller Help ====");

Console.WriteLine();

Console.WriteLine("==== Program Help ====");
inputArgs = new string[]{"?"};
Program.Main(inputArgs);
Console.WriteLine("==== Program Help ====");

#+END_SRC

#+RESULTS: Complete-Hello-World-Examples
#+begin_example
==== Command Execution ====
Hello, World
==== Command Execution ====

==== Command Help ====

hello
Description: says 'Hello' to the given name
Parameters:
--name (String): This parameter is Required
==== Command Help ====

==== Controller Help ====

hello
Description: says 'Hello' to the given name
Parameters:
--name (String): This parameter is Required

goodbye
Description: says 'Good-bye' to the given name
Parameters:
--name (String): This parameter is Optional
==== Controller Help ====

==== Program Help ====
example - a container for example commands
==== Program Help ====
#+end_example
